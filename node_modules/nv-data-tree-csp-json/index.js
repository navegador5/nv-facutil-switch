const Forest=require("nv-data-tree-csp-forest"),{_MustLeaf,_Node}=require("nv-data-tree-csp-node"),{add_repr,noexist,unknown,STYPE_DICT,is_undefined,is_null,is_normal_num,is_str,is_ary,is_dict}=require("nv-facutil-basic"),{is_int_str}=require("nv-string-basic");function _is_ele(t){let e=t.$parent_;return null!==e&&e.is_ary()}function _is_prop(t){let e=t.$parent_;return null!==e&&e.is_obj()}function _get_key(t,e){return t.is_prop()?e:t.is_ele()?e===noexist?t.$sibseq_:e:noexist}function _is_lst_json_child(t){let e=t.$fsibs_;return e=e.filter(t=>!t.is_undefined()&&!t.is_ref()&&!t.is_external()),0===e.length}class _Leaf extends _MustLeaf{#key=noexist;#value=noexist;set key_(t){this.#key=t}set value_(t){this.#value=t}get index_(){return this.$sibseq_}get value_(){return this.#value}is_ele(){return _is_ele(this)}is_prop(){return _is_prop(this)}get key_(){return _get_key(this,this.#key)}is_undefined(){return this.constructor===_Undefined}is_null(){return this.constructor===_Null}is_number(){return this.constructor===_Number}is_str(){return this.constructor===_String}is_bool(){return this.constructor===_True||this.constructor===_False}is_true(){return this.constructor===_True}is_false(){return this.constructor===_False}is_external(){return this.constructor===_External}is_ref(){return this.constructor===_Ref}is_ary(){return!1}is_obj(){return!1}is_leaf(){return!0}is_prim_leaf(){return!0}is_non_prim_leaf(){return!1}is_lst_json_child(){return _is_lst_json_child(this)}stringify(){return JSON.stringify(this.#value)}json(){return this.#value}get $_(){return new Proxy(this,{get:function(t,e,r){return noexist}})}}add_repr(_Leaf,t=>t.stringify(t));class _Undefined extends _Leaf{}add_repr(_Undefined,t=>{});class _Null extends _Leaf{}add_repr(_Null,t=>null);class _True extends _Leaf{}add_repr(_True,t=>!0);class _False extends _Leaf{}function _creat_gpim(t,e,r,s=noexist){let n=r.node(t);return n.key_=s,n.value_=e,n}add_repr(_False,t=>!1);const creat_undefined=(t,e=noexist)=>_creat_gpim(_Undefined,void 0,t,e),creat_null=(t,e=noexist)=>_creat_gpim(_Null,null,t,e),creat_true=(t,e=noexist)=>_creat_gpim(_True,!0,t,e),creat_false=(t,e=noexist)=>_creat_gpim(_False,!1,t,e);class _String extends _Leaf{}function creat_str(t,e="",r=noexist){let s=t.node(_String);return s.key_=r,s.value_=e,s}add_repr(_String,t=>"'"+t.value_+"'");class _Number extends _Leaf{}function creat_number(t,e=0,r=noexist){let s=t.node(_Number);return s.key_=r,s.value_=e,s}add_repr(_Number,t=>t.value_);class _External extends _Leaf{stringify(){return that.value_.toString()}json(){return this.value_.toString()}}function creat_external(t,e=unknown,r=noexist){let s=t.node(_External);return s.key_=r,s.value_=e,s}add_repr(_External,t=>"<ext> "+t.value_.toString());class _Ref extends _Leaf{get ref_(){return this.value_}stringify(){return"<ref> "+that.value_.constructor.toString()}json(){return"<ref> "+that.value_.constructor.toString()}}function creat_ref(t,e=unknown,r=noexist){let s=t.node(_Ref);return s.key_=r,s.value_=e,s}function _stringify(t){let e="";var r,s;for([r,s]of t.$sedfs_.filter(t=>!(t[0].$is_leaf()&&"close"===t[1])))r.is_ary()?"open"===s?e+="[":e+="]":r.is_obj()?"open"===s?e+="{":e+="}":r.is_undefined()||r.is_external()||r.is_ref()||(r.is_prop()&&(e=e+JSON.stringify(r.key_)+":"),e+=r.stringify(),r.is_lst_json_child()||(e+=","));return e}function _json_init(t){let e=[];return e=t.is_ary()?[{nd:t,j:[]}]:t.is_obj()?[{nd:t,j:{}}]:[{nd:t,j:t.json()}],e}function _json_creat_j(t){return t.is_ary()?[]:t.is_obj()?{}:t.json()}function _json_wfs(t){let{nd:e,j:r}=t[0];if(e.is_leaf())return r;{let s=[];for(;0<t.length;){for(var n of t){let{nd:e,j:r}=n;if(!(e.is_prim_leaf()||e.is_non_prim_leaf()||e.is_external()||e.is_ref()))if(e.is_ary()){let t=e.$children_;t=t.map(t=>{var e=_json_creat_j(t);return r.push(e),{nd:t,j:e}}),t=t.filter(t=>!t.nd.is_leaf()),s=s.concat(t)}else{let t=e.$children_;t=t.map(t=>{var e=_json_creat_j(t);return{nd:t,j:r[t.key_]=e}}),t=t.filter(t=>!t.nd.is_leaf()),s=s.concat(t)}}t=s,s=[]}return r}}add_repr(_Ref,t=>"<ref> "+t.value_.constructor.toString());class _O extends _Node{#key=noexist;#repr=!1;set key_(t){this.#key=t}is_undefined(){return!1}is_null(){return!1}is_bool(){return!1}is_true(){return!1}is_false(){return!1}is_number(){return!1}is_str(){return!1}is_external(){return!1}is_ref(){return!1}is_ary(){return this.constructor===_Array}is_obj(){return this.constructor===_Object}is_leaf(){return 0===this.$children_count_}is_prim_leaf(){return!1}is_non_prim_leaf(){return this.is_leaf()}get index_(){return this.$sibseq_}is_ele(){return _is_ele(this)}is_prop(){return _is_prop(this)}get key_(){return _get_key(this,this.#key)}is_lst_json_child(){return _is_lst_json_child(this)}stringify(){return _stringify(this)}json(){return _json_wfs(_json_init(this))}get length(){return this.$children_count_}get repr_(){return this.#repr}show(){return this.#repr=!0,this}unshow(){this.#repr=!1}get $_(){return new Proxy(this,{get:function(t,e,r){is_int_str(e)&&(e=parseInt(e));e=t.get(e);return null!==e?e.$_:null},set:function(t,e,r,s){var n=t[t.constructor.SYM_DICT.get_forest];if(null!==t.get(e))return null;n=load_from_json(r,n)[0];return is_int_str(e)&&(e=parseInt(e)),t.set(e,n).$_}})}}class _Array extends _O{get(t){return this.$child(t)}set(e,r){if(0<=e&&e<this.$children_count_){let t=this.$child(e);return t.$add_rsib(r),t.$disconn(),{old:t,new:r}}return null}set_undefined_at(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_undefined(e);return this.set(t,e)}set_null_at(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_null(e);return this.set(t,e)}set_true_at(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_true(e);return this.set(t,e)}set_false_at(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_false(e);return this.set(t,e)}set_number_at(t,e){e=creat_number(this[this.constructor.SYM_DICT.get_forest],e);return this.set(t,e)}set_str_at(t,e){e=creat_str(this[this.constructor.SYM_DICT.get_forest],e);return this.set(t,e)}set_ary_at(t){let e=this[this.constructor.SYM_DICT.get_forest];var r=e.node(_Array);return this.set(t,r)}set_obj_at(t){let e=this[this.constructor.SYM_DICT.get_forest];var r=e.node(_Object);return this.set(t,r)}set_external_at(t,e){e=creat_external(this[this.constructor.SYM_DICT.get_forest],e);return this.set(t,e)}set_ref_at(t,e){e=creat_ref(this[this.constructor.SYM_DICT.get_forest],e);return this.set(t,e)}append(t){return this.$append_child(t)}append_undefined(){var t=this[this.constructor.SYM_DICT.get_forest],t=creat_undefined(t);return this.append(t)}append_null(){var t=this[this.constructor.SYM_DICT.get_forest],t=creat_null(t);return this.append(t)}append_true(){var t=this[this.constructor.SYM_DICT.get_forest],t=creat_true(t);return this.append(t)}append_false(){var t=this[this.constructor.SYM_DICT.get_forest],t=creat_false(t);return this.append(t)}append_number(t){t=creat_number(this[this.constructor.SYM_DICT.get_forest],t);return this.append(t)}append_str(t){t=creat_str(this[this.constructor.SYM_DICT.get_forest],t);return this.append(t)}append_ary(){let t=this[this.constructor.SYM_DICT.get_forest];var e=t.node(_Array);return this.append(e)}append_obj(){let t=this[this.constructor.SYM_DICT.get_forest];var e=t.node(_Object);return this.append(e)}append_external(t){t=creat_external(this[this.constructor.SYM_DICT.get_forest],t);return this.append(t)}append_ref(t){t=creat_ref(this[this.constructor.SYM_DICT.get_forest],t);return this.append(t)}prepend(t){return this.$prepend_child(t)}prepend_undefined(){var t=this[this.constructor.SYM_DICT.get_forest],t=creat_undefined(t);return this.prepend(t)}prepend_null(){var t=this[this.constructor.SYM_DICT.get_forest],t=creat_null(t);return this.prepend(t)}prepend_true(){var t=this[this.constructor.SYM_DICT.get_forest],t=creat_true(t);return this.prepend(t)}prepend_false(){var t=this[this.constructor.SYM_DICT.get_forest],t=creat_false(t);return this.prepend(t)}prepend_number(t){t=creat_number(this[this.constructor.SYM_DICT.get_forest],t);return this.prepend(t)}prepend_str(t){t=creat_str(this[this.constructor.SYM_DICT.get_forest],t);return this.prepend(t)}prepend_ary(){let t=this[this.constructor.SYM_DICT.get_forest];var e=t.node(_Array);return this.prepend(e)}prepend_obj(){let t=this[this.constructor.SYM_DICT.get_forest];var e=t.node(_Object);return this.prepend(e)}prepend_external(t){var e=creat_external(this[this.constructor.SYM_DICT.get_forest],ond);return this.prepend(e)}prepend_ref(t){t=creat_ref(this[this.constructor.SYM_DICT.get_forest],t);return this.prepend(t)}insert_at(e,r){if(0<=r&&r<this.$children_count_){let t=this.$child(r);return t.$add_lsib(e),e}return null}insert_undefined_at(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_undefined(e);return this.insert_at(e,t)}insert_null_at(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_null(e);return this.insert_at(e,t)}insert_true_at(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_true(e);return this.insert_at(e,t)}insert_false_at(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_false(e);return this.insert_at(e,t)}insert_number_at(t,e){t=creat_number(this[this.constructor.SYM_DICT.get_forest],t);return this.insert_at(t,e)}insert_str_at(t,e){t=creat_str(this[this.constructor.SYM_DICT.get_forest],t);return this.insert_at(t,e)}insert_ary_at(t){let e=this[this.constructor.SYM_DICT.get_forest];var r=e.node(_Array);return this.insert_at(r,t)}insert_obj_at(t){let e=this[this.constructor.SYM_DICT.get_forest];var r=e.node(_Object);return this.insert_at(r,t)}insert_external_at(t,e){t=creat_external(this[this.constructor.SYM_DICT.get_forest],t);return this.insert_at(t,e)}insert_ref_at(t,e){t=creat_ref(this[this.constructor.SYM_DICT.get_forest],t);return this.insert_at(t,e)}}function creat_ary(t){return t.node(_Array)}add_repr(_Array,t=>t.repr_?t.$children_:`[...<${t.length} unshow>...]`);class _Object extends _O{get(t){var e;for(e of this.$children_)if(e.key_===t)return e;return null}k2i(e){var r=this.$children_;for(let t=0;t<r.length;t++)if(r[t].key_===e)return t;return-1}i2k(t){t=this.$child(t);return null!==t?t.key_:noexist}set(t,e){var r=this.k2i();if(0<=r){let t=this.$child(r);return t.$add_rsib(e),t.$disconn(),{old:t,new:e}}return null}set_undefined(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_undefined(e);return this.set(t,e)}set_null(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_null(e);return this.set(t,e)}set_true(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_true(e);return this.set(t,e)}set_false(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_false(e);return this.set(t,e)}set_number(t,e){e=creat_number(this[this.constructor.SYM_DICT.get_forest],e);return this.set(t,e)}set_str(t,e){e=creat_number(this[this.constructor.SYM_DICT.get_forest],e);return this.set(t,e)}set_ary(t){let e=this[this.constructor.SYM_DICT.get_forest];var r=e.node(_Array);return this.set(t,r)}set_obj(t){let e=this[this.constructor.SYM_DICT.get_forest];var r=e.node(_Object);return this.set(t,r)}set_external(t,e){e=creat_external(this[this.constructor.SYM_DICT.get_forest],e);return this.set(t,e)}set_ref(t,e){e=creat_number(this[this.constructor.SYM_DICT.get_forest],e);return this.set(t,e)}append(t,e){return e.key_=t,this.k2i(t)<0?this.$append_child(e):null}append_undefined(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_undefined(e);return this.append(t,e)}append_null(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_null(e);return this.append(t,e)}append_true(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_true(e);return this.append(t,e)}append_false(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_false(e);return this.append(t,e)}append_number(t,e){e=creat_number(this[this.constructor.SYM_DICT.get_forest],e);return this.append(t,e)}append_str(t,e){e=creat_str(this[this.constructor.SYM_DICT.get_forest],e);return this.append(t,e)}append_ary(t){let e=this[this.constructor.SYM_DICT.get_forest];var r=e.node(_Array);return this.append(t,r)}append_obj(t){let e=this[this.constructor.SYM_DICT.get_forest];var r=e.node(_Object);return this.append(t,r)}append_external(t,e){e=creat_external(this[this.constructor.SYM_DICT.get_forest],e);return this.append(t,e)}append_ref(t,e){e=creat_ref(this[this.constructor.SYM_DICT.get_forest],e);return this.append(t,e)}prepend(t,e){return e.key_=t,this.k2i(t)<0?this.$prepend_child(e):null}prepend_undefined(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_undefined(e);return this.prepend(t,e)}prepend_null(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_null(e);return this.prepend(t,e)}prepend_true(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_true(e);return this.prepend(t,e)}prepend_false(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_false(e);return this.prepend(t,e)}prepend_number(t,e){e=creat_number(this[this.constructor.SYM_DICT.get_forest],e);return this.prepend(t,e)}prepend_str(t,e){e=creat_str(this[this.constructor.SYM_DICT.get_forest],e);return this.prepend(t,e)}prepend_ary(t){let e=this[this.constructor.SYM_DICT.get_forest];var r=e.node(_Array);return this.prepend(t,r)}prepend_obj(t){let e=this[this.constructor.SYM_DICT.get_forest];var r=e.node(_Object);return this.prepend(t,r)}prepend_external(t,e){e=creat_number(this[this.constructor.SYM_DICT.get_forest],e);return this.prepend(t,e)}prepend_ref(t,e){e=creat_ref(this[this.constructor.SYM_DICT.get_forest],e);return this.prepend(t,e)}insert_before(e,r){e.key_=r;r=this.k2i();if(0<=r){let t=this.$child(r);return t.$add_lsib(e),e}return null}insert_undefined_before(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_undefined(e);return this.insert_before(e,t)}insert_null_before(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_null(e);return this.insert_before(e,t)}insert_true_before(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_true(e);return this.insert_before(e,t)}insert_false_before(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_false(e);return this.insert_before(e,t)}insert_number_before(t,e){e=creat_number(this[this.constructor.SYM_DICT.get_forest],e);return this.insert_before(e,t)}insert_str_before(t,e){t=creat_str(this[this.constructor.SYM_DICT.get_forest],t);return this.insert_before(t,k)}insert_ary_before(t){let e=this[this.constructor.SYM_DICT.get_forest];var r=e.node(_Array);return this.insert_before(r,t)}insert_obj_before(t){let e=this[this.constructor.SYM_DICT.get_forest];var r=e.node(_Object);return this.insert_before(r,t)}insert_external_before(t,e){e=creat_external(this[this.constructor.SYM_DICT.get_forest],e);return this.insert_before(e,t)}insert_ref_before(t,e){e=creat_ref(this[this.constructor.SYM_DICT.get_forest],e);return this.insert_before(e,t)}insert_after(e,r){e.key_=r;r=this.k2i();if(0<=r){let t=this.$child(r);return t.$add_rsib(e),e}return null}insert_undefined_after(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_undefined(e);return this.insert_after(e,t)}insert_null_after(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_null(e);return this.insert_after(e,t)}insert_true_after(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_true(e);return this.insert_after(e,t)}insert_false_after(t){var e=this[this.constructor.SYM_DICT.get_forest],e=creat_false(e);return this.insert_after(e,t)}insert_number_after(t,e){e=creat_number(this[this.constructor.SYM_DICT.get_forest],e);return this.insert_after(e,t)}insert_str_after(t,e){e=creat_str(this[this.constructor.SYM_DICT.get_forest],e);return this.insert_after(e,t)}insert_ary_after(t){let e=this[this.constructor.SYM_DICT.get_forest];var r=e.node(_Array);return this.insert_after(r,t)}insert_obj_after(t){let e=this[this.constructor.SYM_DICT.get_forest];var r=e.node(_Object);return this.insert_after(r,t)}insert_external_after(t,e){e=creat_external(this[this.constructor.SYM_DICT.get_forest],e);return this.insert_after(e,t)}insert_ref_after(t,e){e=creat_ref(this[this.constructor.SYM_DICT.get_forest],e);return this.insert_after(e,t)}}function creat_obj(t){return t.node(_Object)}function is_nd(t){return t instanceof _Leaf||t instanceof _O}function is_jleaf(t){return is_ary(t)?0===t.length:!is_dict(t)||0===Object.keys(t).length}function _load_init(t,e,r=1e4){return e=e??new Forest(r),is_ary(t)?[[{nd:creat_ary(e),j:t,k:noexist}],e]:is_undefined(t)?[[{nd:creat_undefined(e),j:t,k:noexist}],e]:is_normal_num(t)?[[{nd:creat_number(e,t),j:t,k:noexist}],e]:is_str(t)?[[{nd:creat_str(e,t),j:t,k:noexist}],e]:is_null(t)?[[{nd:creat_null(e,t),j:t,k:noexist}],e]:!0!==t?!1!==t?is_nd(t)?[[{nd:creat_ref(e,t),j:t,k:noexist}],e]:is_dict(t)?[[{nd:creat_obj(e),j:t,k:noexist}],e]:[[{nd:creat_external(e,t),j:t,k:noexist}],e]:[[{nd:creat_false(e,t),j:t,k:noexist}],e]:[[{nd:creat_true(e,t),j:t,k:noexist}],e]}function _ary_add_nd(t,e,r){var s;is_undefined(r)?e.append_undefined():is_null(r)?e.append_null():!0===r?e.append_true():!1===r?e.append_false():is_normal_num(r)?e.append_number(r):is_str(r)?e.append_str(r):is_nd(r)?e.append_ref(r):is_ary(r)?(s=e.append_ary(),0<r.length&&t.push({nd:s,j:r,k:noexist})):is_dict(r)?(s=e.append_obj(),0<Object.keys(r).length&&t.push({nd:s,j:r,k:noexist})):e.append_external(r)}function _dict_add_nd(t,e,r,s){var n;is_undefined(r)?e.append_undefined(s):is_null(r)?e.append_null(s):!0===r?e.append_true(s):!1===r?e.append_false(s):is_normal_num(r)?e.append_number(s,r):is_str(r)?e.append_str(s,r):is_nd(r)?e.append_ref(s,r):is_ary(r)?(n=e.append_ary(s),0<r.length&&t.push({nd:n,j:r,k:s})):is_dict(r)?(n=e.append_obj(s),0<Object.keys(r).length&&t.push({nd:n,j:r,k:s})):e.append_external(s,r)}function load_from_json(t,e,s=1e4){let[n,_]=_load_init(t,e,s);var i,s=n[0].nd;if(is_jleaf(t))return[s,_];{let r=[];for(;0<n.length;){for(var o of n){let{nd:t,j:e}=o;if(t.is_ary())for(i of e)_ary_add_nd(r,t,i);else if(t.is_obj()){var a,u=e;for(a in u){var c=u[a];_dict_add_nd(r,t,c,a)}}}n=r,r=[]}return[s,_]}}add_repr(_Object,r=>{if(r.repr_){let e={},t=r.$children_;return t.forEach(t=>e[t.key_]=t),e}return`[...<${r.length} unshow>...]`}),module.exports={noexist:noexist,unknown:unknown,GPRIM_ARR:[void 0,null,!0,!1],creat_undefined:creat_undefined,creat_null:creat_null,creat_true:creat_true,creat_false:creat_false,creat_str:creat_str,creat_number:creat_number,creat_ary:creat_ary,creat_obj:creat_obj,creat_external:creat_external,creat_ref:creat_ref,is_nd:is_nd,is_jleaf:is_jleaf,load_from_json:load_from_json,_Leaf:_Leaf,_Undefined:_Undefined,_Null:_Null,_True:_True,_False:_False,_String:_String,_Number:_Number,_External:_External,_Ref:_Ref,_O:_O,_Array:_Array,_Object:_Object};